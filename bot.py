import pandas as pd
import discord
from discord.ext import commands
import matplotlib.pyplot as plt
import os
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN = os.getenv("DISCORD_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω



# === –ß—Ç–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_and_prepare_data(before_file, after_file, requirements_file):
    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    before = pd.read_excel(before_file, header=0)
    after = pd.read_excel(after_file, header=0)
    requirements = pd.read_excel(requirements_file, header=0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
    if before.empty:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{before_file}' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.")
        exit()
    if after.empty:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{after_file}' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.")
        exit()
    if requirements.empty:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{requirements_file}' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.")
        exit()

    # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    before.columns = before.columns.str.strip()
    after.columns = after.columns.str.strip()
    requirements.columns = requirements.columns.str.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ 'Governor ID'
    if 'Governor ID' not in before.columns:
        print(f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ '{before_file}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'Governor ID'.")
        exit()

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É
    before['Governor ID'] = before['Governor ID'].fillna('').astype(str).str.strip()
    after['Governor ID'] = after['Governor ID'].fillna('').astype(str).str.strip()
    requirements['Governor ID'] = requirements['Governor ID'].fillna('').astype(str).str.strip()

    return before, after, requirements


# === –†–∞—Å—á—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def calculate_stats(before, after, requirements):
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    result = before.merge(after, on='Governor ID', suffixes=('_before', '_after'))
    result = result.merge(requirements, on='Governor ID')

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    result['Kills Change'] = result['Kill Points_after'] - result['Kill Points_before']
    result['Deads Change'] = result['Deads_after'] - result['Deads_before']  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'Deads'
    result['Kills Completion (%)'] = (result['Kill Points_after'] / result['Required Kills']) * 100
    result['Deaths Completion (%)'] = (result['Deads_after'] / result['Required Deaths']) * 100  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'Deads'

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result.to_excel('results.xlsx', index=False)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'results.xlsx'")
    return result


# === –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º ===
def create_pie_chart(player_name, kills_completion, deaths_completion):
    # –î–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —É–±–∏–π—Å—Ç–≤
    labels_kills = ['–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ']
    data_kills = [kills_completion, max(0, 100 - kills_completion)]
    colors = ['green', 'red']

    plt.figure(figsize=(6, 6))
    plt.pie(data_kills, labels=labels_kills, colors=colors, autopct='%1.1f%%', startangle=140)
    plt.title(f'{player_name} - –£–±–∏–π—Å—Ç–≤–∞')
    plt.savefig(f'{player_name}_kills.png')
    plt.close()

    # –î–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Å–º–µ—Ä—Ç–µ–π
    labels_deaths = ['–í—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ']
    data_deaths = [deaths_completion, max(0, 100 - deaths_completion)]

    plt.figure(figsize=(6, 6))
    plt.pie(data_deaths, labels=labels_deaths, colors=colors, autopct='%1.1f%%', startangle=140)
    plt.title(f'{player_name} - –°–º–µ—Ä—Ç–∏')
    plt.savefig(f'{player_name}_deaths.png')
    plt.close()


# === Discord-–±–æ—Ç ===
intents = discord.Intents.default()  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ intents —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
intents.message_content = True      # –í–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π

bot = commands.Bot(command_prefix='!', intents=intents)  # –ü–µ—Ä–µ–¥–∞—á–∞ intents –≤ –±–æ—Ç–∞


@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

@bot.command()
async def commands(ctx):
    await ctx.send(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "!stats <Governor ID> - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞.\n"
        "!overview - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º.\n"
        "!requirements - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.\n"
    )

@bot.command()
async def req(ctx):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        result = pd.read_excel('results.xlsx')

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        not_completed = result[
            (result['Kills Completion (%)'] < 100) | (result['Deaths Completion (%)'] < 100)
        ]

        if not not_completed.empty:
            await ctx.send("üìã –ò–≥—Ä–æ–∫–∏, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
            for index, row in not_completed.iterrows():
                await ctx.send(
                    f"{row['Governor Name']} (ID: {row['Governor ID']}) - "
                    f"–£–±–∏–π—Å—Ç–≤–∞: {row['Kills Completion (%)']:.2f}%, "
                    f"–°–º–µ—Ä—Ç–∏: {row['Deaths Completion (%)']:.2f}%"
                )
        else:
            await ctx.send("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è!")
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.command()
async def overview(ctx):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        result = pd.read_excel('results.xlsx')

        # –†–∞—Å—á—ë—Ç —Å–≤–æ–¥–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        average_kills = result['Kills Change'].mean()
        average_deads = result['Deads Change'].mean()
        average_completion_kills = result['Kills Completion (%)'].mean()
        average_completion_deads = result['Deaths Completion (%)'].mean()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Discord
        await ctx.send(
            f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–°—Ä–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–±–∏–π—Å—Ç–≤–∞—Ö: {average_kills:.2f}\n"
            f"–°—Ä–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–º–µ—Ä—Ç—è—Ö: {average_deads:.2f}\n"
            f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–±–∏–π—Å—Ç–≤: {average_completion_kills:.2f}%\n"
            f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–º–µ—Ä—Ç–µ–π: {average_completion_deads:.2f}%"
        )
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.command()
async def stats(ctx, player_id):
    try:
        # Load data
        result = pd.read_excel('results.xlsx')
        result['Governor ID'] = result['Governor ID'].astype(str).str.strip()
        player_id = str(player_id).strip()

        # Calculate DKP for all players
        result['DKP'] = (
            (result['Deads_after'] - result['Deads_before']) * 15 +
            (result['Tier 5 Kills_after'] - result['Tier 5 Kills_before']) * 10 +
            (result['Tier 4 Kills_after'] - result['Tier 4 Kills_before']) * 4
        )

        # Rank players by DKP
        result['Rank'] = result['DKP'].rank(ascending=False, method='min')

        # Search for player data
        player_data = result[result['Governor ID'] == player_id]

        if player_data.empty:
            await ctx.send(f"Player with ID {player_id} not found.")
            return

        # Calculate changes
        matchmaking_power = player_data['Power_before'].values[0]
        power_change = player_data['Power_after'].values[0] - player_data['Power_before'].values[0]
        tier4_kills_change = (
            player_data['Tier 4 Kills_after'].values[0] - player_data['Tier 4 Kills_before'].values[0]
        )
        tier5_kills_change = (
            player_data['Tier 5 Kills_after'].values[0] - player_data['Tier 5 Kills_before'].values[0]
        )
        kills_change = tier4_kills_change + tier5_kills_change
        kill_points_change = player_data['Kill Points_after'].values[0] - player_data['Kill Points_before'].values[0]
        deads_change = player_data['Deads_after'].values[0] - player_data['Deads_before'].values[0]

        # Initialize progress variables with default values (to avoid errors)
        kills_completion = 0
        deads_completion = 0

        # Calculate progress
        if kills_change > 0:
            kills_completion = (kills_change / player_data['Required Kills'].values[0]) * 100
        if deads_change > 0:
            deads_completion = (deads_change / player_data['Required Deaths'].values[0]) * 100

        # Round all numeric values and format with thousand separators
        matchmaking_power = f"{round(matchmaking_power):,}".replace(",", ".")
        power_change = f"{round(power_change):,}".replace(",", ".")
        tier4_kills_change = f"{round(tier4_kills_change):,}".replace(",", ".")
        tier5_kills_change = f"{round(tier5_kills_change):,}".replace(",", ".")
        kills_change = f"{round(kills_change):,}".replace(",", ".")
        kill_points_change = f"{round(kill_points_change):,}".replace(",", ".")
        deads_change = f"{round(deads_change):,}".replace(",", ".")
        dkp = f"{round(player_data['DKP'].values[0]):,}".replace(",", ".")
        kills_completion = round(kills_completion)
        deads_completion = round(deads_completion)
        required_kills = f"{round(player_data['Required Kills'].values[0]):,}".replace(",", ".")
        required_deaths = f"{round(player_data['Required Deaths'].values[0]):,}".replace(",", ".")
        rank = int(player_data['Rank'].values[0])

        # Send player statistics
        await ctx.send(f"üìä **Player Statistics:** {player_data['Governor Name'].values[0]} (ID: {player_id})\n"
                       f"üîπ **Matchmaking Power:** {matchmaking_power}\n"
                       f"üîπ **Power Change:** {power_change}\n"
                       f"üîπ **Kill Points (Gained):** {kill_points_change}\n"
                       f"üîπ **Tier 4 Kills (Gained):** {tier4_kills_change}\n"
                       f"üîπ **Tier 5 Kills (Gained):** {tier5_kills_change}\n"
                       f"üîπ **Total Kills (T4 + T5):** {kills_change}\n"
                       f"üîπ **Required Kills:** {required_kills}\n"
                       f"üîπ **Kill Progress (%):** {kills_completion}%\n"
                       f"üîπ **Deaths (Gained):** {deads_change}\n"
                       f"üîπ **Required Deaths:** {required_deaths}\n"
                       f"üîπ **Death Progress (%):** {deads_completion}%\n"
                       f"üîπ **DKP:** {dkp}\n"
                       f"üîπ **DKP Rank:** #{rank}")
    except Exception as e:
        await ctx.send(f"An error occurred: {str(e)}")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ===
def main():
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    before_file = 'start_kvk.xlsx'
    after_file = 'pass4.xlsx'
    requirements_file = 'required.xlsx'

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    before, after, requirements = load_and_prepare_data(before_file, after_file, requirements_file)

    # –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    calculate_stats(before, after, requirements)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.run(TOKEN)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    main()